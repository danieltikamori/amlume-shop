# docker-compose.override.yml (Local Development Overrides)
# Overrides base config for local development. Assumes Spring Boot runs outside Docker.

# Usage:
# To run locally:
#  docker compose -f docker-compose.yaml -f docker-compose.override.yml up -d vault mysql-auth mysql-shop valkey-cache vault-seeder

# To stop locally:
#  docker compose -f docker-compose.yaml -f docker-compose.override.yml down --volumes --remove-orphans

services:
  # --- Vault Dev Configuration ---
  vault:
    container_name: vault-dev # Specific dev name
    ports:
      - "8200:8200" # Expose for local app connection
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "token" # Dev token
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      # VAULT_ADDR already set in base
      VAULT_API_ADDR: "http://vault:8200" # For CLI inside container
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_logs:/vault/logs # Persist logs locally if desired
      # - ./certificates/vault:/vault/certs:ro # If using TLS locally
    healthcheck:
      test: ["CMD", "vault", "status", "-address=http://127.0.0.1:8200"]
      interval: 5s
      timeout: 3s
      retries: 5

# --- Auth Database (Local Dev) ---
# Define the mysql-auth service for local development
  mysql-auth:
    container_name: mysql-auth-dev # Specific dev name
    # Inherits image from base docker-compose.yaml
    ports:
      # Expose auth DB on its specific local port from .env
      - "${AUTH_DB_PORT_LOCAL:-3407}:3306"
    environment:
      # --- Bitnami Vars using AUTH_DB_* from .env ---
      MYSQL_DATABASE: ${AUTH_DB_NAME}
      MYSQL_USER: ${AUTH_DB_USER}
      MYSQL_PASSWORD: ${AUTH_DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # --- Optional: Bitnami TLS Vars ---
      # ... (add if using local TLS for auth DB) ...
    volumes:
      # - ./certificates/database-auth:/etc/mysql/certs:ro # If using local TLS
      # Optional: Use a separate init script directory for the auth DB
      - ./docker/mysql/initdb-auth:/docker-entrypoint-initdb.d:ro
      - mysql-auth-data:/var/lib/mysql # Use specific volume name
      - mysql-auth-logs:/var/log/mysql # Use specific volume name
      # - mysql-backups:/backups # Decide if backups are shared or separate
    healthcheck:
      test: [ 'CMD', '/opt/bitnami/scripts/mysql/healthcheck.sh' ]
      interval: 15s
      timeout: 5s
      retries: 6

  # --- Shop Database (Local Dev) ---
  # We override 'mysql-shop' from the base file for the single local instance
  # Modify the existing mysql-shop definition
  mysql-shop:
    container_name: mysql-shop-dev # Specific dev name
    ports:
      # Expose shop DB on its specific local port from .env
      - "${SHOP_DB_PORT_LOCAL:-3406}:3306"
    environment:
      # --- Bitnami Vars using SHOP_DB_* from .env ---
      MYSQL_DATABASE: ${SHOP_DB_NAME}
      MYSQL_USER: ${SHOP_DB_USER}
      MYSQL_PASSWORD: ${SHOP_DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # --- Optional: Bitnami TLS Vars (if using local TLS for DB) ---
#      MYSQL_TLS_ENABLE: 'yes'
#      MYSQL_TLS_CERT_FILE: '/etc/mysql/certs/mysql_certificate.pem'
#      MYSQL_TLS_KEY_FILE: '/etc/mysql/certs/mysql_private_key.pem'
#      MYSQL_TLS_CA_FILE: '/etc/mysql/certs/mysql_ca.pem'
    volumes:
      # Optional: Mount certs for TLS
#      - ./certificates/database-shop:/etc/mysql/certs:ro # If using local TLS for DB
      # Optional: Use a separate init script directory for the shop DB
#      - ./docker/mysql/initdb-shop:/docker-entrypoint-initdb.d:ro
      - mysql-shop-data:/var/lib/mysql # Use specific volume name
      - mysql-shop-logs:/var/log/mysql # Use specific volume name
      - mysql-backups:/backups
    healthcheck:
      test: [ 'CMD', '/opt/bitnami/scripts/mysql/healthcheck.sh' ]
      interval: 15s
      timeout: 5s
      retries: 6

  # --- Valkey Cache Dev Configuration ---
  valkey-cache:
    command: ["valkey-server", "/etc/valkey/valkey.conf"] # Use config file
    # ports: # Only expose if absolutely needed for direct external access
    #   - "6379:6379" # Valkey default TLS port is often 6379
    volumes:
      - ./docker/valkey/config/valkey.conf:/etc/valkey/valkey.conf:ro
      - ./certificates/valkey:/certs:ro # Mount certs for TLS
      - valkey_data:/data # Persist data locally if needed
    healthcheck:
      # Adjust password and flags if needed, ensure redis-cli is available and supports TLS
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "--tls", "--insecure", "-a", "${VALKEY_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # --- Vault Seeder (Dev Only) ---
  vault-seeder:
    build:
      context: .
      dockerfile: vault-seeder.Dockerfile
    container_name: vault-seeder-job
    environment:
      VAULT_TOKEN: "token" # Use the dev token
      VAULT_PATH: "secret/amlume-shop/local" # Target path in Vault
      ENV_FILE_PATH: "/app/.env"
      VAULT_ADDR: http://vault:8200
      CURL_INSECURE: "true" # If Vault uses self-signed certs locally
    volumes:
      - ./.env:/app/.env:ro
      # - ./certificates/vault/vault_certificate.pem:/etc/ssl/certs/vault_certificate.pem:ro # Alt to insecure curl
    depends_on:
      vault:
        condition: service_healthy
    restart: 'no' # Run once


# Use this command to run locally:
#  docker compose -f docker-compose.yaml -f docker-compose.override.yml up -d vault mysql-auth mysql-shop valkey-cache vault-seeder

  # --- Disable App Services for Local Development ---
  # These services run outside Docker locally

  auth-server:
    image: none # Prevents Docker Compose from trying to build/pull/run it

  shop-app:
    image: none # Prevents Docker Compose from trying to build/pull/run it

# --- Volumes Definition (Ensure all used volumes are defined) ---
volumes:
  vault_logs: {}
  mysql-auth-data: {}
  mysql-auth-logs: {}
  mysql-shop-data: {}
  mysql-shop-logs: {}
  mysql-backups: {}
  valkey_data: {}
  # Add vault_config and vault_data if needed by prod but not base
  vault_config: {}
  vault_data: {}
