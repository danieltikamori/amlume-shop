# docker-compose.override.yml (Local Development Overrides)
# Overrides base config for local development. Assumes Spring Boot runs outside Docker.

# IMPORTANT: everytime .env and seeder scripts are updated, run `docker compose build` to pick up changes (rebuilds images).

# Usage:
# To run locally:
#  docker compose -f docker-compose.yaml -f docker-compose.override.yml up -d vault mysql-auth mysql-shop valkey-cache vault-seeder vault-seeder-authserver redisinsight

# To stop locally:
#  docker compose -f docker-compose.yaml -f docker-compose.override.yml down --volumes --remove-orphans

services:

  # New Relic Agent Infrastructure
  agent:
    container_name: newrelic-infra
    build:
      context: ./docker/newrelic-infra
      dockerfile: newrelic-infra.dockerfile
    #    environment:
    #      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
    cap_add:
      - SYS_PTRACE
    pid: host
    privileged: true
    volumes:
      - "/:/host:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: unless-stopped
    networks:
      - amlume-shop-network

  # --- Hashicorp Consul
  #  consul:
  #    container_name: consul-dev
  #    image: hashicorp/consul:1.21.1
  #    ports:
  #      - "8500:8500"
  #    restart: always
  #    networks:
  #      - amlume-shop-network

  # --- Vault Dev Configuration ---
  vault:
    container_name: vault-dev # Specific dev name
    ports:
      - "8200:8200" # Expose for local app connection
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "token" # Dev token
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      # VAULT_ADDR already set in base
      VAULT_API_ADDR: "http://vault:8200" # For CLI inside container
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_logs:/vault/logs # Persist logs locally if desired
      # - ./certificates/vault:/vault/certs:ro # If using TLS locally
    healthcheck:
      test: ["CMD", "vault", "status", "-address=http://127.0.0.1:8200"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - amlume-shop-network

  # PostgreSQL for user data and role hierarchies
  postgres:
    image: postgres:17.5-bookworm
    container_name: amlume-auth-postgres
    restart: always
    # set shared memory limit when using docker compose
    shm_size: "2g"
    cpus: "2"
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Initialize LTREE extension
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    ports:
      - "54321:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U auth_server_user -d amlume_auth_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - amlume-shop-network

  # Optional: Adminer for PostgreSQL GUI
  adminer:
    image: adminer
    container_name: auth-adminer
    restart: always
    ports:
      - "8888:8888"
    networks:
      - amlume-shop-network

  # --- Auth Database (Local Dev) ---
  #  mysql-auth:
  #    container_name: mysql-auth-dev # Specific dev name
  #    # Inherits image from base docker-compose.yaml
  #    ports:
  #      # Expose auth DB on its specific local port from .env
  #      - "${AUTH_DB_PORT_LOCAL:-3407}:3306"
  #    environment:
  #      # --- Bitnami Vars using AUTH_DB_* from .env ---
  #      MYSQL_DATABASE: ${AUTH_DB_NAME}
  #      MYSQL_USER: ${AUTH_DB_USER}
  #      MYSQL_PASSWORD: ${AUTH_DB_PASSWORD}
  #      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #      # --- Optional: Bitnami TLS Vars ---
  #      # ... (add if using local TLS for auth DB) ...
  #    volumes:
  #      # - ./certificates/database-auth:/etc/mysql/certs:ro # If using local TLS
  #      # Optional: Use a separate init script directory for the auth DB
  #      - ./docker/mysql/initdb-auth:/docker-entrypoint-initdb.d:ro
  #      - mysql-auth-data:/var/lib/mysql # Use specific volume name
  #      - mysql-auth-logs:/var/log/mysql # Use specific volume name
  #      # - mysql-backups:/backups # Decide if backups are shared or separate
  #    healthcheck:
  #      test: [ 'CMD', '/opt/bitnami/scripts/mysql/healthcheck.sh' ]
  #      interval: 15s
  #      timeout: 5s
  #      retries: 6
  #    networks:
  #      - amlume-shop-network

  # --- Shop Database (Local Dev) ---
  # We override 'mysql-shop' from the base file for the single local instance
  # Modify the existing mysql-shop definition
  mysql-shop:
    container_name: mysql-shop-dev # Specific dev name
    ports:
      # Expose shop DB on its specific local port from .env
      - "${SHOP_DB_PORT_LOCAL:-3406}:3306"
    environment:
      # --- Bitnami Vars using SHOP_DB_* from .env ---
      MYSQL_DATABASE: ${SHOP_DB_NAME}
      MYSQL_USER: ${SHOP_DB_USER}
      MYSQL_PASSWORD: ${SHOP_DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # --- Optional: Bitnami TLS Vars (if using local TLS for DB) ---
#      MYSQL_TLS_ENABLE: 'yes'
#      MYSQL_TLS_CERT_FILE: '/etc/mysql/certs/mysql_certificate.pem'
#      MYSQL_TLS_KEY_FILE: '/etc/mysql/certs/mysql_private_key.pem'
#      MYSQL_TLS_CA_FILE: '/etc/mysql/certs/mysql_ca.pem'
    volumes:
      # Optional: Mount certs for TLS
#      - ./certificates/database-shop:/etc/mysql/certs:ro # If using local TLS for DB
      # Optional: Use a separate init script directory for the shop DB
#      - ./docker/mysql/initdb-shop:/docker-entrypoint-initdb.d:ro
      - mysql-shop-data:/var/lib/mysql # Use specific volume name
      - mysql-shop-logs:/var/log/mysql # Use specific volume name
      - mysql-backups:/backups
    healthcheck:
      test: [ 'CMD', '/opt/bitnami/scripts/mysql/healthcheck.sh' ]
      interval: 15s
      timeout: 5s
      retries: 6
    networks:
      - amlume-shop-network

  # --- Valkey Cache Dev Configuration ---
  valkey-cache:
    command: ["valkey-server", "/etc/valkey/valkey.conf"] # Use config file
    # ports: # Only expose if absolutely needed for direct external access
    #   - "6379:6379" # Valkey default TLS port is often 6379
    ports:
      # This line is CRITICAL for authserver (running on host) to connect:
      # It maps port 6379 of the Valkey container to port ${VALKEY_PORT_LOCAL} (default 6379) on your host machine.
      - "${VALKEY_PORT_LOCAL:-6379}:6379"
    volumes:
      - ./docker/valkey/config/valkey.conf:/etc/valkey/valkey.conf:ro
      - ./certificates/valkey:/certs:ro # Mount certs for TLS
      - valkey_data:/data # Persist data locally if needed
    environment:
      # If your valkey.conf doesn't set the password, or if the image uses env vars for it:
      # VALKEY_PASSWORD: ${VALKEY_PASSWORD} # Usually password is set in valkey.conf via 'requirepass'
      # Ensure VALKEY_PASSWORD in your .env matches the one in valkey.conf
      # The healthcheck below uses ${VALKEY_PASSWORD} from the .env file passed to the container.
      # So, if valkey.conf sets the password, this env var for the container is mainly for the healthcheck.
      VALKEY_PASSWORD: ${VALKEY_PASSWORD} # Make it available for healthcheck
    healthcheck:
      # Adjust password and flags if needed, ensure redis-cli is available and supports TLS
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "--tls", "--insecure", "-a", "${VALKEY_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - amlume-shop-network

  # --- Vault Seeder (Dev Only) ---
  vault-seeder:
    build:
      context: .
      dockerfile: vault-seeder.Dockerfile
    container_name: vault-seeder-job
    environment:
      VAULT_TOKEN: "token" # Use the dev token
      VAULT_PATH: "secret/amlume-shop/local" # Target path in Vault
      ENV_FILE_PATH: "/app/.env"
      VAULT_ADDR: http://vault:8200
      CURL_INSECURE: "true" # If Vault uses self-signed certs locally
    volumes:
      - ./.env:/app/.env:ro
      # - ./certificates/vault/vault_certificate.pem:/etc/ssl/certs/vault_certificate.pem:ro # Alt to insecure curl
    depends_on:
      vault:
        condition: service_healthy
    restart: 'no' # Run once
    networks:
      - amlume-shop-network

  # --- Vault Seeder for authserver ---
  vault-seeder-authserver:
    build:
      context: . # Assuming Dockerfile is accessible from project root
      dockerfile: ./docker/vault-seeders/authserver/vault-seeder-authserver.Dockerfile
    container_name: vault-seeder-authserver-job
    environment:
      VAULT_TOKEN: "token" # Can use the same dev token
      VAULT_PATH: "secret/authserver/local" # *** Path for authserver secrets ***
      ENV_FILE_PATH: "/app/authserver.env" # *** Path to authserver's .env file ***
      VAULT_ADDR: http://vault:8200
      CURL_INSECURE: "true" # If using self-signed certs
    volumes:
      - ./authserver/.env:/app/authserver.env:ro # *** Mount authserver's .env file ***
    depends_on:
      vault:
        condition: service_healthy
    restart: 'no' # Run once
    networks:
      - amlume-shop-network

  # --- Redis Insight (GUI for Redis/Valkey) ---
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - "8001:8001" # Web UI port
    volumes:
      - redisinsight_data:/db # Persist RedisInsight data (e.g., connection configs)
      # The example used /data/redisinsight:/data, but RedisInsight's Docker Hub page suggests /db for persistence.

    # --- RedisGraph, RedisSearch, and RedisTimeSeries Services ---

    #  graph:
    #    image: redislabs/redisgraph
    #    ports:
    #      - ${GRAPH_PORT}:6379
    #    restart: always
    #
    #  search:
    #    image: redislabs/redisearch:latest
    #    ports:
    #      - ${SEARCH_PORT}:6379
    #    restart: always
    #
    #  timeseries:
    #    image: redislabs/redistimeseries
    #    ports:
    #      - ${TIMESERIES_PORT}:6379
    #    restart: always

    # --- Disable App Services for Local Development ---
    # These services run outside Docker locally
    networks:
      - amlume-shop-network
    depends_on:
      - valkey-cache
  #      valkey-cache: # Depends on your Valkey/Redis service
  #        condition: service_healthy # Wait for valkey-cache to be healthy
  auth-server:
    image: none # Prevents Docker Compose from trying to build/pull/run it
  #    container_name: auth-server-dev
  #    build:
  #      context: ./authserver/authserver-app # Path to the Dockerfile
  #      dockerfile: Dockerfile
  #    ports:
  #      - "9000:9000" # Expose the app's port
  #    environment:
  #      # Pass secrets from your .env file to the container
  #      - SPRING_PROFILES_ACTIVE=local
  #      - VAULT_ADDR=http://vault:8200
  #      - VAULT_TOKEN=token
  #      # This license key is used by both the APM agent and the Micrometer registry
  #      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
  #    depends_on:
  #      vault:
  #        condition: service_healthy
  #      postgres:
  #        condition: service_healthy
  #    networks:
  #      - amlume-shop-network


  shop-app:
    image: none # Prevents Docker Compose from trying to build/pull/run it

# --- Additional volumes ---
volumes:
  vault_logs: {}
  vault_config: { }
  vault_data: { }
  mysql-auth-data: {}
  mysql-auth-logs: {}
  mysql-shop-data: {}
  mysql-shop-logs: {}
  mysql-backups: {}
  valkey_data: {}
  postgres_data: { }
  redisinsight_data: { }

# Ensure the network is defined in the override if not relying solely on the base file
# (though it should inherit from the base docker-compose.yaml if named the same)
networks:
  amlume-shop-network:
    # If defined in base, this can be empty or just 'external: true' if pre-existing
    # If this override is the sole definition for local, ensure 'name' matches base.
    name: amlume-shop-network # Ensure this matches the name in docker-compose.yaml
