/*
 * Copyright (c) 2025 Daniel Itiro Tikamori. All rights reserved.
 *
 * This software is proprietary, not intended for public distribution, open source, or commercial use. All rights are reserved. No part of this software may be reproduced, distributed, or transmitted in any form or by any means, electronic or mechanical, including photocopying, recording, or by any information storage or retrieval system, without the prior written permission of the copyright holder.
 *
 * Permission to use, copy, modify, and distribute this software is strictly prohibited without prior written authorization from the copyright holder.
 *
 * Please contact the copyright holder at echo ZnVpd3pjaHBzQG1vem1haWwuY29t | base64 -d && echo for any inquiries or requests for authorization to use the software.
 */

package me.amlu.shop.amlume_shop.config;

import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import io.github.resilience4j.decorators.Decorators;
import io.github.resilience4j.redis.RateLimiter;
import io.github.resilience4j.redis.configure.RateLimiterAspect;
import io.github.resilience4j.redis.configure.RateLimiterAspectExt;
import io.github.resilience4j.springretry.configure.RetryAspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.web.filter.OncePerRequestFilter;

import java.time.Duration;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import java.util.function.Function;


@Configuration
public class RedisConfig {  // Or in your main application configuration

    private static final Logger logger = LoggerFactory.getLogger(RedisConfig.class);

    @Bean
    public CircuitBreaker circuitBreaker(CircuitBreakerRegistry registry) {
        CircuitBreakerConfig config = CircuitBreakerConfig.custom()
            .failureRateThreshold(50) // Percentage of failures to trigger open state
            .slowCallRateThreshold(50) // Percentage of slow calls to trigger open state
            .slowCallDurationThreshold(Duration.ofSeconds(2)) // Threshold for slow calls
            .waitDurationInOpenState(Duration.ofSeconds(30)) // Time in open state before transitioning to half-open
            .permittedNumberOfCallsInHalfOpenState(5) // Number of calls allowed in half-open state
            // ... other configurations
            .build();

        return registry.circuitBreaker("redisCircuitBreaker", config);
    }
}