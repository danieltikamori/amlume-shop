/*
 * Copyright (c) 2025 Daniel Itiro Tikamori. All rights reserved.
 *
 * This software is proprietary, not intended for public distribution, open source, or commercial use. All rights are reserved. No part of this software may be reproduced, distributed, or transmitted in any form or by any means, electronic or mechanical, including photocopying, recording, or by any information storage or retrieval system, without the prior written permission of the copyright holder.
 *
 * Permission to use, copy, modify, and distribute this software is strictly prohibited without prior written authorization from the copyright holder.
 *
 * Please contact the copyright holder at echo ZnVpd3pjaHBzQG1vem1haWwuY29t | base64 -d && echo for any inquiries or requests for authorization to use the software.
 */

package me.amlu.shop.amlume_shop.product_management.dto;

import java.math.BigDecimal;

/**
 * Represents product data for transfer (API requests/responses).
 * Implemented as an immutable record.
 */
public record CreateProductRequest(
        Long productId,
        String productName,
        String productImage, // Will hold the GENERATED filename (for constructing image URLs)
        String originalImageFilename, // For reference (for display/download purposes)
        String productDescription,
        Integer productQuantity,
        BigDecimal productPrice,
        BigDecimal productDiscountPercentage,
        BigDecimal specialPrice,
        // Added fields from mapEntityToDto
        Long categoryId,
        String categoryName,
        Long sellerId,
        String sellerName
        // Add other fields like version, createdAt if needed in DTO
) {
    // No explicit fields, constructor, getters, equals, hashCode, or toString needed.
    // They are automatically generated by the 'record' keyword.

    // We can add compact constructors for validation or static factory methods if desired,
    // but for a simple DTO, the canonical constructor is often enough.
}
