#
# Copyright (c) 2025 Daniel Itiro Tikamori. All rights reserved.
#
# This software is proprietary, not intended for public distribution, open source, or commercial use. All rights are reserved. No part of this software may be reproduced, distributed, or transmitted in any form or by any means, electronic or mechanical, including photocopying, recording, or by any information storage or retrieval system, without the prior written permission of the copyright holder.
#
# Permission to use, copy, modify, and distribute this software is strictly prohibited without prior written authorization from the copyright holder.
#
# Please contact the copyright holder at echo ZnVpd3pjaHBzQG1vem1haWwuY29t | base64 -d && echo for any inquiries or requests for authorization to use the software.
#

alert:
  max-batch-size: 100

asn:
  ratelimit:
    window-seconds: 60
    max-requests: 100
    capacity: 100

  update:
    schedule: 0 0 0 * * *

cache:
  revoked-token:
    ttl-seconds: 3600 # TTL in seconds (e.g., 3600 for 1 hour)
  token:
    initial-capacity: ${CACHE_INITIAL_CAPACITY:100}
    maximum-size: ${CACHE_MAXIMUM_SIZE:10000}
    expiration-minutes: ${CACHE_EXPIRATION_MINUTES:30}
    revoked-cache:
      max-size: 10000
  stats:
    report:
      interval: 60000  # milliseconds
  asn:
    size: 10000
    expiration: 1h

geoip:
  database:
    #    path: classpath:GeoLite2-Country.mmdb
    path: classpath:/project/geoip/GeoLite2-City.mmdb
  license:
    account-id: ${GEOIP2_ACCOUNT_ID}
    key: ${GEOIP2_LICENSE_KEY}

geoip2:
  database:
    path: /project/geoip/GeoLite2-ASN.mmdb
  #    path: classpath:geolite2/GeoLite2-ASN.mmdb
  #    Or if using City database
  #    path: classpath:geolite2/GeoLite2-City.mmdb
  account-id: ${GEOIP2_ACCOUNT_ID}
  license-key: ${GEOIP2_LICENSE_KEY}

hcp:
  HCP_CLIENT_ID: ${HCP_CLIENT_ID}
  HCP_CLIENT_SECRET: ${HCP_CLIENT_SECRET}
  HCP_ORGANIZATION_ID: ${HCP_ORGANIZATION_ID}
  HCP_PROJECT_ID: ${HCP_PROJECT_ID}
  HCP_APP_NAME: ${HCP_APP_NAME}

jti:
  bloomfilter:
    expected-insertions: 1000000
    false-positive-probability: 0.01
  cleanup:
    rate-ms: 300000 # Cleanup every 5 minutes (300,000 ms)

logging:
  level:
    org.springframework.cache: TRACE # Set to TRACE to see cache hits/misses logged by Spring
    #    root: DEBUG
    me.amlu.shop.amlume_shop: DEBUG
    me.amlu.shop.amlume_shop.config: DEBUG
    me.amlu.shop.amlume_shop.service: DEBUG
    me.amlu.shop.amlume_shop.controller: DEBUG
    me.amlu.shop.amlume_shop.repository: DEBUG
    me.amlu.shop.amlume_shop.security: DEBUG
    me.amlu.shop.amlume_shop.util: DEBUG
    me.amlu.shop.amlume_shop.exception: DEBUG
    me.amlu.shop.amlume_shop.model: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true
    show-details: when_authorized # always
  metrics:
    cache:
      instrument: true
    enabled: true
    enable:
      all: true
      cache: true
      redis: true
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true
        valkey.operation.duration: true
        paseto.token.validation: true
        percentiles:
          paseto.token.validation: 0.5,0.95,0.99
  prometheus:
    metrics:
      export:
        enabled: true
        step: 10s
#          valkey.operation.duration: 0.5,0.95,0.99
#          http.server.requests: 0.5,0.95,0.99

mfa:
  encryption:
    password: ${MFA_ENCRYPTION_PASSWORD}
    salt: ${MFA_ENCRYPTION_SALT}


notification:
  email:
    from: ${NOTIFICATION_EMAIL_FROM}
    to: ${NOTIFICATION_EMAIL_TO}
  slack:
    webhook-url: ${SLACK_WEBHOOK_URL}
    channel: ${SLACK_CHANNEL_NAME}
    channel-id: ${SLACK_CHANNEL_ID}

paseto:
  secret-key: ${PASETO_SECRET_KEY}  # Gets value from environment variable
  expiration: 3600                  # Non-sensitive config is fine here
  access:
    expiration: 3600
    local:
      expiration: 3600
      secret-key: ${PASETO_ACCESS_SECRET_KEY}
      kid: ${PASETO_ACCESS_LOCAL_KID}
    public:
      expiration: 3600
      private-key: ${PASETO_ACCESS_PRIVATE_KEY}
      public-key: ${PASETO_ACCESS_PUBLIC_KEY}
      kid: ${PASETO_ACCESS_PUBLIC_KID}
  refresh:
    expiration: 86400
    local:
      expiration: 86400
      secret-key: ${PASETO_REFRESH_SECRET_KEY}
      kid: ${PASETO_REFRESH_LOCAL_KID}
    public:
      expiration: 86400
      private-key: ${PASETO_REFRESH_PRIVATE_KEY}
      public-key: ${PASETO_REFRESH_PUBLIC_KEY}
      kid: ${PASETO_REFRESH_PUBLIC_KID}
  token-no-footer:
    parts: 3
  token-with-footer:
    parts: 4

recaptcha:
  secret: ${RECAPTCHA_SECRET_KEY}
  site-key: ${RECAPTCHA_SITE_KEY}

project:
  image:
    path: /project/images
  file:
    path: /project/files
  geoip:
    path: /project/geoip

rate-limiting:
  ip:
    limit: 100
    window-seconds: 60
  username:
    limit: 20
    window-seconds: 60

  token:
    validation: 200.0
  claims:
    validation: 200.0
  capacity: 100.0
  duration: 1
  time-unit: MINUTES

resilience4j:
  retry:
    instances:
      asnLookup:
        maxAttempts: 3
        waitDuration: 500ms # Start with 500ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
        ignoreExceptions:
          - me.amlu.shop.amlume_shop.exceptions.RateLimitExceededException # Don't retry if rate limited
          - jakarta.validation.ValidationException

      captchaValidation:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2

  circuitbreaker:
    instances:
      valkeyService:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 20s
        permittedNumberOfCallsInHalfOpenState: 5
      asnDnsLookup:
        failureRateThreshold: 50 # Percentage of failures to open
        slowCallRateThreshold: 100 # Percentage of slow calls to open
        slowCallDurationThreshold: 2000 # ms - calls slower than this are 'slow'
        permittedNumberOfCallsInHalfOpenState: 5
        slidingWindowSize: 20 # Number of calls to monitor when closed
        minimumNumberOfCalls: 10 # Minimum calls before calculating thresholds
        waitDurationInOpenState: 30000 # ms - How long to stay open
        # recordExceptions: # Exceptions that count as failures
        #   - java.io.IOException
        #   - java.util.concurrent.TimeoutException
        # ignoreExceptions: # Exceptions that *don't* count as failures
        #   - me.amlu.shop.amlume_shop.exceptions.ResourceNotFoundException
      asnWhoisLookup:
        failureRateThreshold: 50 # Percentage of failures to open
        slowCallRateThreshold: 100 # Percentage of slow calls to open
        slowCallDurationThreshold: 2000 # ms - calls slower than this are 'slow'
        permittedNumberOfCallsInHalfOpenState: 5
        slidingWindowSize: 20 # Number of calls to monitor when closed
        minimumNumberOfCalls: 10 # Minimum calls before calculating thresholds
        waitDurationInOpenState: 30000 # ms - How long to stay open
        # recordExceptions: # Exceptions that count as failures
        #   - java.io.IOException
        #   - java.util.concurrent.TimeoutException
        # ignoreExceptions: # Exceptions that *don't* count as failures
        #   - me.amlu.shop.amlume_shop.exceptions.ResourceNotFoundException


  timelimiter:
    instances:
      valkeyService:
        timeoutDuration: 1s
  #        cancelRunningFuture: true

  bulkhead:
    instances:
      valkeyService:
        maxConcurrentCalls: 10

  timeout:
    instances:
      valkeyService:
        timeoutDuration: 1s

  mail:
    host: ${MAIL_HOST}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    port: ${MAIL_PORT}
    properties:
      mail:
        smtp:
          starttls:
            enable: ${MAIL_STARTTLS_ENABLE}
          auth: ${MAIL_AUTH_ENABLE}

security:
  max-devices-per-user: 5
  device-fingerprint:
    hash-algorithm: ${HASH_ALGORITHM}
    hash-encoding: ${HASH_ENCODING}
    fingerprint-salt: ${FINGERPRINT_SALT}

    verification-timeout-seconds: 300
    storage:
      type: database  # or redis/hazelcast
    trusted-device:
      expiration-days: 30
  ip:
    suspicious-requests-threshold: 5
    block-threshold: 10
  token:
    revoked-cache:
      max-size: 10000

  #      expiration-seconds: 3600
  user:
    rate-limit:
      max-attempts: 5
      window-seconds: 300  # 5 minutes
      time-window-minutes: 30
      lockout-duration-minutes: 30
    password:
      min-length: 12
      max-length: 127
      strength:
        min-score: 3
        min-entropy: 30
        min-uppercase: 1
        min-lowercase: 1
        min-digits: 1
        min-special: 1
  vpn:
    min-suspicious-factors: 2

service:
  name: ${SERVICE_NAME}
  audience: ${SERVICE_AUDIENCE}
  version: ${SERVICE_VERSION}
  environment: ${SERVICE_ENVIRONMENT}

spring:
  application:
    name: ${SERVICE_NAME}
    version: ${SERVICE_VERSION}
    environment: ${SERVICE_ENVIRONMENT}
    description: ${SERVICE_DESCRIPTION}
    audience: ${SERVICE_AUDIENCE}
    contact:
      name: ${SERVICE_CONTACT_NAME}
      url: ${SERVICE_CONTACT_URL}
      email: ${SERVICE_CONTACT_EMAIL}
    license:
      name: ${SERVICE_LICENSE_NAME}
      url: ${SERVICE_LICENSE_URL}
      version: ${SERVICE_LICENSE_VERSION}
      description: ${SERVICE_LICENSE_DESCRIPTION}
      contact:
        name: ${SERVICE_LICENSE_CONTACT_NAME}
        url: ${SERVICE_LICENSE_CONTACT_URL}
        email: ${SERVICE_LICENSE_CONTACT_EMAIL}

  cache:
    type: redis  # redis/valkey
    cache-names: mfaTokens
    valkey:
      host: ${VALKEY_HOST:localhost}
      port: ${VALKEY_PORT:7000}
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=1h

  cloud:
    vault:
      enabled: true
      fail-fast: true

    gateway:
      routes:
        - id: asn_lookup_route
          uri: lb://asn-lookup-service
          predicates:
            - Path=/asn/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
  #  datasource:
  #    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
  #    username: ${DB_USER}
  #    password: ${DB_PASSWORD}
  #    driverClassName: org.postgresql.Driver

  h2:
    console:
      enabled: true
      path: /h2-console
    datasource:
      url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
      username: sa
      password:
      driverClassName: org.h2.Driver

  jackson:
    default-property-inclusion: non_null
    deserialization:
      fail-on-unknown-properties: false
      accept-empty-string-as-null-object: true
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false
    mapper:
      accept-case-insensitive-properties: true
    property-naming-strategy: SNAKE_CASE
    time-zone: UTC

  main:
    #    allow-circular-references: true
    keep-alive: true
    web-application-type: reactive
  profiles:
    active: local
  threads:
    virtual:
      enabled: true
      enabled.manually: false
      name-prefix: ${SERVICE_NAME}

  jpa: # To store events in a database
    #    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true # Show SQL generated by JPA queries in the console
    hibernate:
      ddl-auto: create-drop # Create database schema on startup and drop it on shutdown. Use "update" instead of "create-drop" in production.
      properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
      show-sql: true
    properties:
      hibernate:
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true
          time_zone: UTC

  mfa:
    excluded-uris: "/api/auth/,/public/,/health,/favicon.ico"
    rate-limit:
      max-attempts: 5
      window-seconds: 300  # 5 minutes
      time-window-minutes: 30

# Thread Pool Configuration
threadpool:
  io:
    core-pool-size: 20
    max-pool-size: 200
    queue-capacity: 2000
    thread-name-prefix: my-io-task-
  token-background:
    core-pool-size: 5
    max-pool-size: 50
    queue-capacity: 500
    thread-name-prefix: my-token-background-
  token-cpu:
    queue-capacity: 50
    thread-name-prefix: my-token-cpu-
  scalable-token:
    keep-alive-seconds: 120
    thread-name-prefix: my-scalable-token-

token:
  access:
    validity: 3600 # 1 hour
    auto-refresh: true
  claims:
    validity: 3600
    auto-refresh: true
    auto-refresh-attempts: 3
    auto-refresh-interval: 300000
    validation:
      rate-limit:
        permits-per-second: 10
        max-attempts: 5
        window-seconds: 300  # 5 minutes
        time-window-minutes: 30
        lockout-duration-minutes: 30
        lockout-duration-seconds: 300
        lockout-duration-hours: 1
        lockout-duration-days: 1
  local:
  processing:
    rate-limit:
      permits-per-second: 10
      max-attempts: 5
      window-seconds: 300  # 5 minutes
      time-window-minutes: 30
      lockout-duration-minutes: 30
      lockout-duration-seconds: 300
      lockout-duration-hours: 1
      lockout-duration-days: 1
    batch:
      size: 100
  refresh:
    validity: 86400 # 24 hours
    auto-refresh: true
  validation:
    rate-limit:
      permits-per-second: 10
      max-attempts: 5
      window-seconds: 300  # 5 minutes
      time-window-minutes: 30
      lockout-duration-minutes: 30
      lockout-duration-seconds: 300
      lockout-duration-hours: 1
      lockout-duration-days: 1

valkey:
  nodes: ${VALKEY_HOST}:${VALKEY_PORT}
  host: ${VALKEY_HOST}
  port: ${VALKEY_PORT}
  password: ${VALKEY_PASSWORD}
  database: ${VALKEY_DATABASE}
  timeout: 5000
  cluster:
    enabled: false
    nodes: ${VALKEY_HOST}:${VALKEY_PORT}
    password: ${VALKEY_CLUSTER_PASSWORD}
    timeout: 5000
  max-attempts: 5
  max-batch-size: 100
  max-pipeline-requests: 100
  max-connections: 100
  max-connections-per-node: 100
  max-connections-per-node-per-route: 100
  max-connections-per-route: 100

  pool:
    max-active: 8
    max-idle: 8
    min-idle: 0
    max-wait-millis: 10000
    min-evictable-idle-time-millis: 10000
    num-tests-per-eviction-run: 3
    time-between-eviction-runs-millis: 10000
    test-while-idle: true
    test-on-borrow: true
    test-on-return: true
    block-when-exhausted: true
    soft-min-evictable-idle-time-millis: 10000
    lifo: false
    eviction-policy-class-name: org.apache.commons.pool2.impl.DefaultEvictionPolicy
    jmx-enabled: true
    jmx-name-base: connection-pool
    jmx-name-prefix: "valkey.pool"

vault:
  uri: ${VAULT_URI}
  token: ${VAULT_TOKEN}

web:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS}
    allowed-methods: ${CORS_ALLOWED_METHODS}
    allowed-headers: ${CORS_ALLOWED_HEADERS}
    exposed-headers: ${CORS_EXPOSED_HEADERS}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS}
    max-age: ${CORS_MAX_AGE}
  whois:
    server: ${WHOIS_SERVER}
    port: ${WHOIS_PORT}
    timeout: ${WHOIS_TIMEOUT}

#whois:
#  server: ${WHOIS_SERVER}
#  port: ${WHOIS_PORT}
#  timeout: ${WHOIS_TIMEOUT}