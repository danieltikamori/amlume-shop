app:
  ssl:
    trust-store:
      # Use 'file:' for filesystem or 'classpath:' if packaged in JAR
      path: file:./config/central-truststore.jks
      # LOAD SECURELY! Use environment variable for the password.
      password: ${APP_CENTRAL_TRUSTSTORE_PASSWORD}
      # type: JKS # Optional: Specify type if not JKS

spring:
  application:
    name: ${AS_NAME:authserver}

  cloud:
    config:
      enabled: false
      import-check:
        enabled: false
    consul:
      config:
        enabled: false
        import-check:
          enabled: false
  config:
    import:
      - application_prod.yml
      - application-resilience.yml

  # MongoDB Configuration for Session Storage
  data:
    mongodb:
      uri: mongodb://${MONGODB_SESSION_DB_HOST:localhost}:${MONGODB_SESSION_DB_PORT_LOCAL:27017}/${MONGODB_SESSION_DB_NAME:sessions_auth_db}
      auto-index-creation: true
    redis:
      port: ${VALKEY_PORT:6379}
      host: ${VALKEY_HOST:localhost}
  
  # Redis Configuration for Caching Only
  cache:
    type: redis
  # PostgreSQL Configuration for User Data and Role Hierarchies
  datasource:
    url: jdbc:postgresql://${POSTGRES_AUTH_DB_HOST:localhost}:${POSTGRES_AUTH_DB_PORT_LOCAL:54321}/${POSTGRES_DB_NAME:amlume_auth_db}
    username: ${POSTGRES_DB_USER:auth_server_user}
    password: ${POSTGRES_DB_PASSWORD:changeme}
    driver-class-name: org.postgresql.Driver

  flyway:
    baseline-on-migrate: true
    repair-on-migrate: true

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true
          time_zone: UTC

  # Session Configuration
  session:
    store-type: mongodb
    mongodb:
      collection-name: auth_sessions
    timeout: 7200  # 2 hours
    cookie:
      http-only: true
      secure: true
      same-site: lax
      name: AMLUAUTHJSESSIONID

  # Security Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: openid,profile,email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}" # Default pattern
          github:
            client-id: "YOUR_GITHUB_CLIENT_ID_HERE" # Get from GitHub Developer Settings
            client-secret: "YOUR_GITHUB_CLIENT_SECRET_HERE" # Get from GitHub Developer Settings
            scope: read:user, user:email # Ensure 'user:email' for primary email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}" # Default pattern
        # provider: # Often auto-discovered for OIDC, or common providers are pre-configured
        #   google:
        #     issuer-uri: https://accounts.google.com
    rememberme:
      key: "remembermekey1234567890_"
    webauthn:
      rpName: "Amlume-Passkeys"
      # Replace it with the domain name of the application
      rpId: localhost
      allowedOrigins:
        # Replace with the URL of the application. Notice: this _MUST_ be an HTTPS URL with a valid certificate
        - "http://localhost:8080"

# Server Configuration
server:
  port: ${AS_SERVER_PORT:9000}
  ssl:
    enabled: true
    key-store: ${KEY_STORE_PATH}
    key-store-password: ${KEY_STORE_PASSWORD}
    key-alias: authserverhttps

# Logging Configuration
logging:
  level:
    root: INFO
    me.amlu: DEBUG
    org:
      springframework:
        security: ${SPRING_SECURITY_LOG_LEVEL:TRACE}
    org.springframework.security: INFO
    org.springframework.session: INFO
    org.springframework.data.mongodb: INFO
  pattern:
    console: ${LOGPATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger{15}) - %msg%n}
