app:
  ssl:
    trust-store:
      # Use 'file:' for filesystem or 'classpath:' if packaged in JAR
      path: classpath:config/central-truststore.jks # <-- CHANGE HERE
      #      path: file:./config/central-truststore.jks
      # LOAD SECURELY! Use environment variable for the password.
      # Password for the truststore, to be loaded from Vault if sensitive
      # For now, assuming APP_CENTRAL_TRUSTSTORE_PASSWORD is an env var Spring Boot picks up
      # or you can map it from Vault: ${authserver.security.truststore.password}
      password: ${APP_CENTRAL_TRUSTSTORE_PASSWORD}

oauth2:
  clients:
    shopClient:
      secret: ${oauth2.clients.shopClient.secret} # This is the key Spring Boot resolves     # type: JKS # Optional: Specify type if not JKS

spring:
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration

  application:
    name: ${AS_NAME:authserver}
  #  config:
  #    import: application_prod.yml
  #  profiles:
  #    active: default

  # --- Spring Cloud Vault Configuration ---
  cloud:
    vault:
      enabled: true
      fail-fast: true # Set to false for local dev if Vault isn't always up when starting authserver
      uri: http://localhost:8200 # Your local Vault address
      connection-timeout: 5000
      read-timeout: 15000
      # --- Authentication: TOKEN for local dev, AppRole for prod ---
      authentication: TOKEN
      token: ${VAULT_TOKEN}   # Read from environment variable VAULT_TOKEN (set this in your .env)

      kv:
        enabled: true
        backend: secret    # Default KV v2 mount path
        # Spring Cloud Vault will automatically try paths like:
        # secret/data/authserver/        (for common app secrets)
        # secret/data/authserver,local/  (for profile-specific secrets if spring.profiles.active=local)
        # secret/data/application/       (for global application secrets)
        # We will put secrets in secret/data/authserver/local/ for this example.
        # default-context: "authserver" # This would make it look in secret/data/authserver/
        # profile-separator: "/" # Default is comma, but slash is common for path-like profiles

  # --- Import Vault Secrets ---
  # This tells Spring to load configuration from Vault.
  # Properties from Vault will override those in this file if names match.
  config:
    import:
      #      - "optional:vault://" # General import, Spring Cloud Vault uses default paths
      # You can be more specific if needed:
      - "optional:vault://secret/authserver/local"


  datasource:
    # Credentials will be overridden by Vault if keys like 'spring.datasource.username' and
    # 'spring.datasource.password' exist in secret/data/authserver/local (or secret/data/authserver)
    # If the file path changed, adapt accordingly
    #    url: jdbc:mysql://localhost:3406/amlume_db?sslMode=VERIFY_CA&trustCertificateKeyStoreUrl=file:./config/central-truststore.jks&trustCertificateKeyStoreType=JKS&trustCertificateKeyStorePassword=${APP_CENTRAL_TRUSTSTORE_PASSWORD} # <-- Corrected and password added
    #    url: jdbc:mysql://localhost:3406/amlume_db?sslMode=VERIFY_CA&trustCertificateKeyStoreUrl=file:./config/central-truststore.jks&trustCertificateKeyStoreType=JKS
    #    url: jdbc:mysql://localhost:3406/amlume_db?sslMode=DISABLED
    url: jdbc:mysql://${AUTH_DB_HOST:localhost}:${AUTH_DB_PORT_LOCAL:3407}/${AUTH_DB_NAME:amlume_auth_db}?sslMode=DISABLED&allowPublicKeyRetrieval=true
    #    url: jdbc:mysql://${AUTH_DB_HOST:localhost}:${AUTH_DB_PORT_LOCAL:3306}/${AUTH_DB_NAME:amlume_auth_db}
    username: ${spring.datasource.username}
    password: ${spring.datasource.password}
    driverClassName: com.mysql.cj.jdbc.Driver

  initial-root-user:
    email: ${ROOT_USER_EMAIL}
    password: ${ROOT_USER_PASSWORD}

  # --- JPA / Hibernate ---
  # Disable open-in-view for performance
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: true
    hibernate:
      ddl-auto: update # Use "update" for dev, create-drop if schema changes, "validate" or "none" for prod
      show-sql: true
    properties:
      hibernate:
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true
          time_zone: UTC
  docker:
    compose:
      enabled: false # Disable Spring Boot's automatic Docker Compose management for local profile

  security:
    oauth2:
      #      authorizationserver:
      #        client:
      #          public-client:
      #            registration:
      #              client-id: "public-client"
      #              client-authentication-methods:
      #                - "none"
      #              authorization-grant-types:
      #                - "authorization_code"
      #              redirect-uris:
      #                - "http://127.0.0.1:8080"
      #              scopes:
      #                - "openid"
      #                - "profile"
      #            require-authorization-consent: true
      #            # require-proof-key setting is important to prevent PKCE downgrade attacks
      #            require-proof-key: true

      client:
        registration:
          google:
            # client-id and client-secret will be overridden by Vault if keys like
            # 'spring.security.oauth2.client.registration.google.client-id' and
            # 'spring.security.oauth2.client.registration.google.client-secret'
            # exist in secret/data/authserver/local (or secret/data/authserver)
            client-id: ${spring.security.oauth2.client.registration.google.client-id} # Matches key in Vault
            client-secret: ${spring.security.oauth2.client.registration.google.client-secret} # Matches key in Vault
            scope: openid, profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}" # Default pattern
          github:
            client-id: ${spring.security.oauth2.client.registration.github.client-id} # Matches key in Vault
            client-secret: ${spring.security.oauth2.client.registration.github.client-secret} # Matches key in Vault
            scope: read:user, user:email # Ensure 'user:email' for primary email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}" # Default pattern
        # provider: # Often auto-discovered for OIDC, or common providers are pre-configured
        #   google:
        #     issuer-uri: https://accounts.google.com
    rememberme:
      key: ${spring.security.rememberme.key} # Matches key in Vault
    webauthn:
      rpName: "Amlume Passkeys"
      # Replace it with the domain name of the application
      rpId: localhost
      allowedOrigins:
        - "http://localhost:8080" # amlume-shop
        - "http://localhost:9000" # authserver itself if its UI uses WebAuthn
        # Replace with the URL of the application. Notice: this _MUST_ be an HTTPS URL with a valid certificate

#    client:
#      registration:
#        amlumeclient:
#          client-id: amlumeclient
#          client-secret: Qw3rTy6UjMnB9zXcV2pL0sKjHn5TxQqB
#          authorization-grant-type: authorization_code
#          redirect-uri: "{baseUrl}/login/oauth2/code/amlumeclient"
#          scope: openid,profile,email
#      provider:
#        amlumeauth:
#          issuer-uri: http://localhost:9000


server:
  port: ${AS_SERVER_PORT:9000}

logging:
  level:
    org:
      springframework:
        #        security: ${SPRING_SECURITY_LOG_LEVEL:TRACE}
        security: ${SPRING_SECURITY_LOG_LEVEL:INFO} # Reduce default to INFO
        cloud.vault: DEBUG # Keep vault logging at DEBUG for setup
        vault.core: DEBUG
  pattern:
    console: ${LOGPATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger{15}) - %msg%n}

    # --- Define properties for OAuth2 client secrets to be loaded from Vault for seeding ---
    # These will be injected into LocalSecurityConfig using @Value
    # Spring Cloud Vault will populate these if keys like 'oauth2.clients.amlumeapi.secret'
    # are found in secret/data/authserver/local (or secret/data/authserver)
    oauth2:
      clients:
        amlumeapi:
          secret: ${oauth2.clients.amlumeapi.secret} # Matches key in Vault
        amlumeintrospect:
          secret: ${oauth2.clients.amlumeintrospect.secret} # Matches key in Vault
        shopClient:
          secret: ${oauth2.clients.shopClient.secret} # Matches key in Vault
        postmanClient:
          secret: ${oauth2.clients.postmanClient.secret} # Matches key in Vault
