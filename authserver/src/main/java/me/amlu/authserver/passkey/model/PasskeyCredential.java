/*
 * Copyright (c) 2025 Daniel Itiro Tikamori. All rights reserved.
 *
 * This software is proprietary, not intended for public distribution, open source, or commercial use. All rights are reserved. No part of this software may be reproduced, distributed, or transmitted in any form or by any means, electronic or mechanical, including photocopying, recording, or by any information storage or retrieval system, without the prior written permission of the copyright holder.
 *
 * Permission to use, copy, modify, and distribute this software is strictly prohibited without prior written authorization from the copyright holder.
 *
 * Please contact the copyright holder at echo ZnVpd3pjaHBzQG1vem1haWwuY29t | base64 -d && echo for any inquiries or requests for authorization to use the software.
 */

package me.amlu.authserver.passkey.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import me.amlu.authserver.model.AbstractAuditableEntity;
import me.amlu.authserver.security.util.EncryptedByteArrayConverter;
import me.amlu.authserver.user.model.User;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.proxy.HibernateProxy;

import java.time.Instant;
import java.util.Objects;

@Entity
@Table(name = "passkey_credentials")
@Builder
@AllArgsConstructor
public class PasskeyCredential extends AbstractAuditableEntity {

    /**
     * The unique identifier for the passkey credential.
     * This is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, updatable = false)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    // optional=false means a PasskeyCredential MUST belong to a User
    @JoinColumn(name = "user_id", nullable = false) // Foreign key column in this table
    private User user;

    /**
     * The user handle (typically User.externalId as Base64URL) associated with this credential
     * at the time of registration.
     */
    @Column(name = "user_handle", nullable = false, length = 255)
    private String userHandle;

    /**
     * A user-friendly name for this passkey (e.g., "My YubiKey", "Laptop Touch ID").
     */
    @Column(name = "friendly_name", length = 255)
    private String friendlyName;

    /**
     * The type of the credential, typically "public-key".
     */
    @Column(name = "credential_type", length = 50)
    private String credentialType;

    /**
     * The unique ID for this credential, provided by the authenticator (Base64URL encoded).
     * This is used to identify the credential during authentication.
     */
    @Column(name = "credential_id", nullable = false, unique = true, length = 512)
    // Raw Credential ID, often Base64URL string
    private String credentialId;

    /**
     * The COSE-encoded public key of the credential.
     * Encrypted before stored in the database.
     */
    @Lob
    @Column(name = "public_key_cose", nullable = false)
    @Convert(converter = EncryptedByteArrayConverter.class)
    private byte[] publicKeyCose; // COSE-encoded public key

    /**
     * The signature counter, indicating how many times this credential has been used.
     * Helps detect cloned authenticators.
     */
    @Column(name = "signature_count", nullable = false)
    private Long signatureCount;

    /**
     * Indicates if User Verification (e.g., PIN, biometrics) was used during registration.
     */
    @Column(name = "uv_initialized")
    private Boolean uvInitialized;

    /**
     * A comma-separated list of authenticator transports (e.g., "internal", "usb", "nfc", "ble", "hybrid").
     */
    @Column(name = "transports", length = 100)
    private String transports;

    /**
     * Indicates if the authenticator is eligible for backup (e.g., syncable passkeys).
     */
    @Column(name = "backup_eligible")
    private Boolean backupEligible;

    /**
     * Indicates the current backup state of the authenticator.
     */
    @Column(name = "backup_state")
    private Boolean backupState;

    /**
     * The attestation object received from the authenticator during registration.
     * May not be stored long-term after initial processing.
     * Encrypted before stored in the database.
     */
    @Lob
    @Column(name = "attestation_object") // Often processed at registration and might not be stored long-term
    @Convert(converter = EncryptedByteArrayConverter.class)
    private byte[] attestationObject;

    /**
     * Timestamp of when this passkey was last used for authentication.
     */
    @Column(name = "last_used_at")
    private Instant lastUsedAt;

    /**
     * Timestamp of when this passkey credential was created.
     */
    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private Instant createdAt;

    // --- Constructors ---
    public PasskeyCredential() {
        // JPA requires a no-arg constructor
    }

    // --- Getters and Setters ---

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public String getUserHandle() {
        return userHandle;
    }

    public void setUserHandle(String userHandle) {
        this.userHandle = userHandle;
    }

    public String getFriendlyName() {
        return friendlyName;
    }

    public void setFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
    }

    public String getCredentialType() {
        return credentialType;
    }

    public void setCredentialType(String credentialType) {
        this.credentialType = credentialType;
    }

    public String getCredentialId() {
        return credentialId;
    }

    public void setCredentialId(String credentialId) {
        this.credentialId = credentialId;
    }

    public byte[] getPublicKeyCose() {
        return publicKeyCose;
    }

    public void setPublicKeyCose(byte[] publicKeyCose) {
        this.publicKeyCose = publicKeyCose;
    }

    public Long getSignatureCount() {
        return signatureCount;
    }

    public void setSignatureCount(Long signatureCount) {
        this.signatureCount = signatureCount;
    }

    public Boolean getUvInitialized() {
        return uvInitialized;
    }

    public void setUvInitialized(Boolean uvInitialized) {
        this.uvInitialized = uvInitialized;
    }

    public String getTransports() {
        return transports;
    }

    public void setTransports(String transports) {
        this.transports = transports;
    }

    public Boolean getBackupEligible() {
        return backupEligible;
    }

    public void setBackupEligible(Boolean backupEligible) {
        this.backupEligible = backupEligible;
    }

    public Boolean getBackupState() {
        return backupState;
    }

    public void setBackupState(Boolean backupState) {
        this.backupState = backupState;
    }

    public byte[] getAttestationObject() {
        return attestationObject;
    }

    public void setAttestationObject(byte[] attestationObject) {
        this.attestationObject = attestationObject;
    }

    public Instant getLastUsedAt() {
        return lastUsedAt;
    }

    public void setLastUsedAt(Instant lastUsedAt) {
        this.lastUsedAt = lastUsedAt;
    }

    public Instant getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Instant createdAt) {
        this.createdAt = createdAt;
    }

    // --- equals, hashCode, toString ---

    @Override
    public final boolean equals(Object o) {
        if (this == o) return true;
        if (o == null) return false;
        Class<?> oEffectiveClass = o instanceof HibernateProxy hibernateProxy ? hibernateProxy.getHibernateLazyInitializer().getPersistentClass() : o.getClass();
        Class<?> thisEffectiveClass = this instanceof HibernateProxy hibernateProxy ? hibernateProxy.getHibernateLazyInitializer().getPersistentClass() : this.getClass();
        if (thisEffectiveClass != oEffectiveClass) return false;
        PasskeyCredential that = (PasskeyCredential) o;
        return getId() != null && Objects.equals(getId(), that.getId());
    }

    @Override
    public final int hashCode() {
        return Objects.hashCode(getId()); // Or Objects.hash(id) if id can be null for new entities before persist
    }

    @Override
    public String toString() {
        return "PasskeyCredential{" +
                "id=" + id +
                ", userId=" + (user != null ? user.getId() : "null") + // Avoid N+1 if user is lazy and not loaded
                ", userHandle='" + userHandle + '\'' +
                ", friendlyName='" + friendlyName + '\'' +
                ", credentialId='" + (credentialId != null ? credentialId.substring(0, Math.min(credentialId.length(), 10)) + "..." : "null") + '\'' + // Truncate for brevity
                ", signatureCount=" + signatureCount +
                ", createdAt=" + createdAt +
                ", lastUsedAt=" + lastUsedAt +
                '}';
    }
}
