# Local development setup for the AmLume Shop application.

# Defines external services (Vault, MySQL, Valkey) for local development.
# Run the Spring Boot application outside of this Docker Compose setup.

#How it Works:
#
#  You run docker-compose up.
#  Docker Compose starts vault, mysql, valkey-cache, promtail.
#The vault-seeder service waits because of depends_on: vault: condition: service_healthy.
#  Once Vault's healthcheck passes, vault-seeder starts.
#  Its entrypoint.sh script runs, waits for Vault to be fully ready (unsealed), reads your .env file (mounted into /app/.env), and uses the Vault CLI inside the container to write the secrets to secret/amlume-shop/mfa (or the path set via VAULT_PATH).
#The entrypoint.sh script exits, and the vault-seeder container stops (restart: 'no').
#  Your main Spring Boot application (running outside or started later) can now connect to Vault and find the secrets already populated.

services:
  # --- HashiCorp Vault Service ---
  vault:
    image: hashicorp/vault:1.19.2 # Recommended to use a specific version (in this case, must match the vault-seeder version)
    container_name: vault-dev
    ports:
      # Expose Vault API on host port 8200
      - "8200:8200"
    environment:
      # Vault Dev Mode Configuration (Insecure - For Development ONLY)
      VAULT_DEV_ROOT_TOKEN_ID: "95eba8ed-f6fc-958a-f490-c7fd0eda5e9e" # Use this token in your Spring app config
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200" # Listen on all interfaces inside container
      # --- Optional: Set VAULT_ADDR for CLI inside the container ---
      VAULT_ADDR: "http://127.0.0.1:8200" # Usually needed if you exec into the container
    cap_add:
      # Required for Vault to lock memory pages (prevents swapping sensitive data)
      - IPC_LOCK
    volumes:
      # --- Optional: Persistence (Uncomment if you want data to survive restarts) ---
      # Note: Dev mode primarily uses in-memory storage. For file storage in dev:
      # Add '-dev -dev-root-token-id="my-dev-root-token" -dev-listen-address="0.0.0.0:8200" -config=/vault/config/local.json' to command
      # And mount a config file + data directory.
      # For a more production-like setup, use a proper backend (like file, consul, postgres etc.) and don't run in dev mode.
      # - ./vault-data:/vault/file # Example for file backend persistence
      # Optional: Persist Vault logs
      - vault_logs:/vault/logs
      # command: vault server -dev # This is the default for the image, usually not needed explicitly
    networks:
      - amlume-shop-network
    healthcheck: # Added basic healthcheck for dependency
      test: [ "CMD", "vault", "status", "-address=http://127.0.0.1:8200" ]
      interval: 5s
      timeout: 3s
      retries: 5
    # Note: Dev mode uses in-memory storage by default. Data is lost on restart.

  # --- MySQL Database Service ---
  mysql:
    image: mysql:lts # Use Long Term Support version
    container_name: mysql-db
    ports:
      # Expose MySQL on host port 3306
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 7D3212C359485FBF140ABBEBFF4A09CFAB1C0F98 # Change in production
      MYSQL_DATABASE: amlume_db
      MYSQL_USER: amlume_user
      MYSQL_PASSWORD: C0961F7D8F83574BEA49E9B412BBA60704CD720C # Change in production
    volumes:
      # Persist database data
      - mysql_data:/var/lib/mysql
    networks:
      - amlume-shop-network

  # --- Valkey Cache Service ---
  valkey-cache:
    image: valkey/valkey:latest
    container_name: valkey-cache
    ports:
      # Expose Valkey on host port 6379
      - "6379:6379"
    volumes:
      # Optional: Persist Valkey data (useful if appendonly is enabled)
      - valkey_data:/data
    # Optional: Enable persistence (AOF)
    command: ["valkey-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - amlume-shop-network

    # --- Promtail Service ---
    # --- Promtail Log Agent ---
  promtail:
    image: grafana/promtail:2.9.5
    container_name: promtail-agent
    volumes:
      - ./logs:/var/log/app:ro
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    environment:
      # This correctly reads the full URL from the .env file
      LOKI_URL: ${LOKI_URL}
      # LOKI_USERNAME and LOKI_PASSWORD are no longer needed here
    networks:
      - amlume-shop-network

  # --- Vault Seeder Service ---
    # This service is responsible for seeding Vault with initial secrets
  vault-seeder:
    build:
      context: . # Directory containing vault-seeder.Dockerfile and entrypoint.sh
      dockerfile: vault-seeder.Dockerfile
    container_name: vault-seeder-job
    environment:
      # Pass the token and target path to the script
      VAULT_TOKEN: "95eba8ed-f6fc-958a-f490-c7fd0eda5e9e"
      VAULT_PATH: "secret/amlume-shop/mfa" # Or override if needed
      ENV_FILE_PATH: "/app/.env" # Path inside the container where .env is mounted
      # Optional: Adjust Vault address if not using 'vault' hostname
      # VAULT_ADDR: http://vault:8200
    volumes:
      # Mount your project's .env file into the container
      - ./.env:/app/.env:ro # Mount as read-only
      # Mount the entrypoint script (alternative to COPY in Dockerfile if preferred)
      # - ./entrypoint.sh:/app/entrypoint.sh:ro
    networks:
      - amlume-shop-network
    depends_on:
      vault:
        condition: service_healthy # Waits for Vault's healthcheck to pass
    restart: 'no' # Crucial: Run this container only once


# --- Volumes Definition ---
# Define named volumes for data persistence
volumes:
  vault_logs: {}
  mysql_data: {}
  valkey_data: {} # Define volume for Valkey persistence

# --- Network Definition ---
# Define a common network for the services
networks:
  amlume-shop-network:
    name: amlume-shop-network # Explicitly name the network