#*Note: Spring Boot automatically maps environment variables like `VAULT_URI` to `vault.uri`.*
#  *   **Command-Line Arguments:**
#         java -jar your-app.jar --vault.uri=http://localhost:8200 --vault.token=s.YourToken
#
#  Your VaultConfig.java is ready. You just need to:
#         1.Start your Vault container (e.g., docker run -p 8200:8200 --cap-add=IPC_LOCK -e 'VAULT_DEV_ROOT_TOKEN_ID=myroot' vault).
#         2.Note the Vault address (usually http://localhost:8200 if accessing from the host) and the root token (e.g., myroot in the example command, or the one Vault prints).
#         3.Provide these values to your Spring Boot application using one of the methods above (properties file, environment variables, etc.) for the vault.uri and vault.token properties.

services:
  your-spring-app:
    image: spring-app-image
    environment:
      VAULT_URI: http://vault:8200 # Assumes vault service name is 'vault'
      VAULT_TOKEN: s.YourVaultToken
    depends_on:
      - vault
  vault:
    image: hashicorp/vault:latest # Or pin to a specific version like 1.16.1
    container_name: vault-dev
    ports:
      - "8200:8200" # Map host port 8200 to container port 8200
    environment:
      # --- Vault Dev Mode Configuration ---
      # Sets the root token ID. Use this value for 'vault.token' in your Spring app.
      # WARNING: This is for development ONLY. Keep it secure.
      VAULT_DEV_ROOT_TOKEN_ID: "my-dev-root-token"

      # Makes Vault listen on all interfaces inside the container
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"

      # --- Optional: Set VAULT_ADDR for CLI inside the container ---
      # VAULT_ADDR: "http://127.0.0.1:8200" # Usually needed if you exec into the container

    cap_add:
      # Required for Vault to lock memory pages (prevents swapping sensitive data)
      - IPC_LOCK
    volumes:
      # --- Optional: Persistence (Uncomment if you want data to survive restarts) ---
      # Note: Dev mode primarily uses in-memory storage. For file storage in dev:
      # Add '-dev -dev-root-token-id="my-dev-root-token" -dev-listen-address="0.0.0.0:8200" -config=/vault/config/local.json' to command
      # And mount a config file + data directory.
      # For a more production-like setup, use a proper backend (like file, consul, postgres etc.) and don't run in dev mode.
      # - ./vault-data:/vault/file # Example for file backend persistence
      - vault_logs:/vault/logs # Optional: Persist logs
    # command: vault server -dev # This is the default for the image, usually not needed explicitly

volumes:
  # Define the named volume for logs (if used)
  vault_logs: {}
  # vault_data: {} # Define if using file persistence volume mount

networks:
  default:
    name: amlume-shop-network # Optional: Define a custom network


    # ... other vault config ...
        